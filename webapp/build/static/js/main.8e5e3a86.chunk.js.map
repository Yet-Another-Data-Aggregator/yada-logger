{"version":3,"sources":["components/NetworkConnection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NetworkConnection","useState","availableNetworks","setNetworks","Container","List","className","console","log","length","map","network","ListItem","ListItemIcon","Wifi","ListItemText","ssid","primary","NetworkList","Button","onClick","fetch","then","response","a","json","responseJson","alert","data","catch","reason","scanResults","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAIe,SAASA,IAAqB,IAAD,EACiCC,mBAAS,IAD1C,mBACjCC,EADiC,KACdC,EADc,KA6ExC,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAMC,UAAU,eAAhB,SA9BY,SAACJ,GAGjB,OAFAK,QAAQC,IAAIN,GAERA,EAAkBO,OAAS,EAEvB,8BACKP,EAAkBQ,KAAI,SAACC,GACnBC,EAAA,EACIC,EAAA,EACIC,EAAA,EAEJC,EAAA,EAAsDJ,EAAQK,UAQ3E,8BACI,cAACJ,EAAA,EAAD,CAAUN,UAAU,SAApB,SACI,cAACS,EAAA,EAAD,CAAcT,UAAU,sBAAsBW,QAAQ,kCAU7DC,CAAYhB,KAGjB,cAACiB,EAAA,EAAD,CAAQC,QAhFI,WAChBC,MAAM,SAASC,KAAf,uCAAoB,WAAOC,GAAP,eAAAC,EAAA,sEACSD,EAASE,OADlB,OACZC,EADY,OAGhBC,MAAMD,EAAaE,MACnBrB,QAAQC,IAAIkB,EAAaE,MAJT,2CAApB,uDAKGC,OAAM,SAACC,GACNvB,QAAQC,IAAI,yBAA2BsB,OAyEvC,kBACA,cAACX,EAAA,EAAD,CAAQC,QAtEQ,WAKpBC,MAAM,gBAAgBC,KAAtB,uCAA2B,WAAOC,GAAP,eAAAC,EAAA,sEACED,EAASE,OADX,OACnBC,EADmB,OAGvBvB,EAAYuB,EAAaK,aAEzBxB,QAAQC,IAAI,iCACZD,QAAQC,IAAIkB,GACZnB,QAAQC,IAAIN,GAPW,2CAA3B,uDAQG2B,OAAM,SAACC,GACNvB,QAAQC,IAAI,SAAWsB,OAwDvB,wBChEGE,MAnBf,WAYE,OACE,qBAAK1B,UAAU,MAAf,SACE,cAACN,EAAD,OCLSiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8e5e3a86.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { List, ListItem, ListItemText, Icon, ListItemIcon, Button, Container } from '@material-ui/core';\nimport { Wifi } from '@material-ui/icons';\n\nexport default function NetworkConnection() {\n    const [availableNetworks, setNetworks]: [Array<{ ssid: string }>, any] = useState([]);\n\n    const sendTestGet = () => {\n        fetch(\"/ping\").then(async (response) => {\n            var responseJson = await response.json();\n\n            alert(responseJson.data);\n            console.log(responseJson.data);\n        }).catch((reason) => {\n            console.log(\"Something went wrong: \" + reason);\n        })\n    };\n\n    const refreshNetworks = () => {\n        getWifiNetworks();\n    };\n\n    function getWifiNetworks() {\n        fetch(\"/rescan_wifi\").then(async (response) => {\n            var responseJson = await response.json();\n\n            setNetworks(responseJson.scanResults);\n\n            console.log(\"Success Getting Wifi Networks\");\n            console.log(responseJson);\n            console.log(availableNetworks);\n        }).catch((reason) => {\n            console.log(\"ERROR:\" + reason);\n        });\n    }\n\n    function sendTestPost(message: string) {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ data: message })\n        };\n\n        fetch(\"/testpost\", requestOptions).then(async (response) => {\n            var responseJson = await response.json();\n\n            alert(responseJson.data);\n            console.log(responseJson.data);\n        }).catch((reason) => {\n            console.log(\"Something went wrong: \" + reason);\n        })\n    }\n\n    const NetworkList = (availableNetworks: Array<{ ssid: string }>) => {\n        console.log(availableNetworks);\n\n        if (availableNetworks.length > 0) {\n            return (\n                <div>\n                    {availableNetworks.map((network) => {\n                        <ListItem className=\"border\">\n                            <ListItemIcon>\n                                <Wifi />\n                            </ListItemIcon>\n                            <ListItemText className=\"flex justify-center\" primary={network.ssid} />\n                        </ListItem>\n                    })}\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <ListItem className=\"border\">\n                        <ListItemText className=\"flex justify-center\" primary=\"Didn't find any networks.\" />\n                    </ListItem>\n                </div>\n            )\n        }\n    }\n\n    return (\n        <Container>\n            <List className=\"w-1/2 border\">\n                {NetworkList(availableNetworks)}\n            </List>\n\n            <Button onClick={sendTestGet}>Ping</Button>\n            <Button onClick={refreshNetworks}>Refresh</Button>\n        </Container>\n    );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NetworkConnection from './components/NetworkConnection';\n\nfunction App() {\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  const callBackendAPI = async () => {\n    const response = await fetch('/express_backend');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\n  return (\n    <div className=\"App\">\n      <NetworkConnection />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}