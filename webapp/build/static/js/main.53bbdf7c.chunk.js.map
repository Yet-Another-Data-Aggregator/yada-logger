{"version":3,"sources":["components/NetworkConnection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NetworkConnection","useState","availableNetworks","setNetworks","selectedNetworkIndex","setSelectedNetworkIndex","securityKey","setSecurityKey","onSecurityKeyChange","event","console","log","target","value","attemptConnection","ssid","passkey","requestOptions","method","headers","body","JSON","stringify","wifi_ssid","wifi_passcode","fetch","then","response","a","json","responseJson","catch","reason","Container","List","className","length","map","network","index","encIcon","encrypted","Lock","LockOpen","connectionPrompt","TextField","variant","size","label","onChange","Button","onClick","e","Card","Wifi","ListItemText","primary","ListItem","NetworkList","scan_results","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAIe,SAASA,IAAqB,IAAD,EACoBC,mBAAS,IAD7B,mBACjCC,EADiC,KACdC,EADc,OAE+BF,oBAAU,GAFzC,mBAEjCG,EAFiC,KAEXC,EAFW,OAGaJ,mBAAS,IAHtB,mBAGjCK,EAHiC,KAGpBC,EAHoB,KAKlCC,EAAsB,SAACC,GACzBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBN,EAAeE,EAAMG,OAAOC,QAmChC,SAASC,EAAkBC,EAAcC,GACrC,IAAMC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,UAAWR,EAAMS,cAAeR,KAG3DN,QAAQC,IAAI,mCAAqCI,EAAQ,IAAMC,GAE/DS,MAAM,eAAgBR,GAAgBS,KAAtC,uCAA2C,WAAOC,GAAP,eAAAC,EAAA,sEACdD,EAASE,OADK,OACnCC,EADmC,OAGvCpB,QAAQC,IAAImB,GAH2B,2CAA3C,uDAIGC,OAAM,SAACC,GACNtB,QAAQC,IAAI,yBAA2BqB,MAoE/C,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAMC,UAAU,eAAhB,SAjDY,SAACjC,GAGjB,OAFAQ,QAAQC,IAAIT,GAERA,GAAqBA,EAAkBkC,OAAS,EAE5C,8BACKlC,EAAkBmC,KAAI,SAACC,EAASC,GAC7B,IAAMC,EAAWF,EAAQG,UAAc,cAACC,EAAA,EAAD,CAAMP,UAAU,SAAa,cAACQ,EAAA,EAAD,CAAUR,UAAU,SAElFS,EAAoBL,GAASnC,EAC/B,sBAAK+B,UAAU,qCAAf,UACI,cAACU,EAAA,EAAD,CAAWC,QAAQ,WAAWC,KAAK,QAAQC,MAAM,eAAeC,SAAUzC,IAC1E,cAAC0C,EAAA,EAAD,CAAQJ,QAAQ,WAAWX,UAAU,OAAOgB,QAAS,SAACC,GAClDtC,EAAkBwB,EAAQvB,KAAMT,IADpC,wBAIJ,KAEJ,OACA,eAAC+C,EAAA,EAAD,CAAkBlB,UAAU,SAASgB,QAAS,SAACC,GAAO/C,EAAwBkC,IAA9E,UACI,sBAAKJ,UAAU,OAAf,UACA,cAACmB,EAAA,EAAD,CAAMnB,UAAU,SAEhB,cAACoB,EAAA,EAAD,CAAcpB,UAAU,sBAAsBqB,QAASlB,EAAQvB,OAE1DyB,KAGJI,IATML,QAmBnB,8BACI,cAACkB,EAAA,EAAD,CAAUtB,UAAU,SAApB,SACI,cAACoB,EAAA,EAAD,CAAcpB,UAAU,sBAAsBqB,QAAQ,kCAU7DE,CAAYxD,KAGjB,cAACgD,EAAA,EAAD,CAAQC,QA7GQ,WASpB1B,MAAM,gBAAgBC,KAAtB,uCAA2B,WAAOC,GAAP,eAAAC,EAAA,sEACED,EAASE,OADX,OACnBC,EADmB,OAGvB3B,EAAY2B,EAAa6B,cAEzBjD,QAAQC,IAAI,iCACZD,QAAQC,IAAImB,GANW,2CAA3B,uDAOGC,OAAM,SAACC,GACNtB,QAAQC,IAAI,SAAWqB,OA4FvB,wBC9GG4B,MAnBf,WAYE,OACE,qBAAKzB,UAAU,MAAf,SACE,cAACnC,EAAD,OCLS6D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.53bbdf7c.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport { List, ListItem, ListItemText, Icon, ListItemIcon, Button, Container, TextField, Collapse, Card} from '@material-ui/core';\r\nimport { Wifi, Lock, LockOpen } from '@material-ui/icons';\r\n\r\nexport default function NetworkConnection() {\r\n    const [availableNetworks, setNetworks]: [Array<any>, any] = useState([]);\r\n    const [selectedNetworkIndex, setSelectedNetworkIndex]: [number, any] = useState(-1);\r\n    const [securityKey, setSecurityKey]: [string, any] = useState(\"\");\r\n\r\n    const onSecurityKeyChange = (event : any) => {\r\n        console.log(event.target.value);\r\n        setSecurityKey(event.target.value);\r\n      };\r\n\r\n    const sendTestGet = () => {\r\n        fetch(\"/ping\").then(async (response) => {\r\n            var responseJson = await response.json();\r\n\r\n            alert(responseJson.data);\r\n            console.log(responseJson.data);\r\n        }).catch((reason) => {\r\n            console.log(\"Something went wrong: \" + reason);\r\n        })\r\n    };\r\n\r\n    const refreshNetworks = () => {\r\n        getWifiNetworks();\r\n    };\r\n\r\n    const connectToTestNetwork = () => {\r\n        attemptConnection(\"DATA_ERROR_24G\", \"SmileyApple205\");\r\n    };\r\n\r\n    function getWifiNetworks() {\r\n        fetch(\"/rescan_wifi\").then(async (response) => {\r\n            var responseJson = await response.json();\r\n\r\n            setNetworks(responseJson.scan_results);\r\n\r\n            console.log(\"Success Getting Wifi Networks\");\r\n            console.log(responseJson);\r\n        }).catch((reason) => {\r\n            console.log(\"ERROR:\" + reason);\r\n        });\r\n    }\r\n\r\n    function attemptConnection(ssid: string, passkey: string) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ wifi_ssid: ssid, wifi_passcode: passkey})\r\n        };\r\n\r\n        console.log('sending connection message with ' + ssid +  ':' + passkey);\r\n\r\n        fetch(\"/enable_wifi\", requestOptions).then(async (response) => {\r\n            var responseJson = await response.json();\r\n\r\n            console.log(responseJson);\r\n        }).catch((reason) => {\r\n            console.log(\"Something went wrong: \" + reason);\r\n        })\r\n    }\r\n\r\n    function sendTestPost(message: string) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ data: message })\r\n        };\r\n\r\n        fetch(\"/testpost\", requestOptions).then(async (response) => {\r\n            var responseJson = await response.json();\r\n\r\n            alert(responseJson.data);\r\n            console.log(responseJson.data);\r\n        }).catch((reason) => {\r\n            console.log(\"Something went wrong: \" + reason);\r\n        })\r\n    }\r\n\r\n    const NetworkList = (availableNetworks: Array<any>) => {\r\n        console.log(availableNetworks);\r\n\r\n        if (availableNetworks && availableNetworks.length > 0) {\r\n            return (\r\n                <div>\r\n                    {availableNetworks.map((network, index) => {\r\n                        const encIcon = (network.encrypted) ? (<Lock className=\"mr-5\"/>) : (<LockOpen className=\"mr-5\"/>);\r\n\r\n                        const connectionPrompt = (index == selectedNetworkIndex) ? (\r\n                            <div className=\"my-5 flex space-x-4 justify-center\">\r\n                                <TextField variant=\"outlined\" size=\"small\" label=\"Security Key\" onChange={onSecurityKeyChange}/>\r\n                                <Button variant=\"outlined\" className=\"ml-5\" onClick={(e) => {\r\n                                    attemptConnection(network.ssid, securityKey);\r\n                                }}>Connect</Button>\r\n                            </div>\r\n                        ) : null;\r\n\r\n                        return (\r\n                        <Card key={index} className=\"border\" onClick={(e) => {setSelectedNetworkIndex(index)}}>\r\n                            <div className=\"flex\">\r\n                            <Wifi className=\"ml-5\"/>\r\n                  \r\n                            <ListItemText className=\"flex justify-center\" primary={network.ssid} />\r\n                            \r\n                                {encIcon}\r\n                            </div>\r\n\r\n                            {connectionPrompt} \r\n                        </Card>\r\n                        \r\n                        )\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <ListItem className=\"border\">\r\n                        <ListItemText className=\"flex justify-center\" primary=\"Didn't find any networks.\" />\r\n                    </ListItem>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <List className=\"w-1/2 border\">\r\n                {NetworkList(availableNetworks)}\r\n            </List>\r\n\r\n            <Button onClick={refreshNetworks}>Refresh</Button>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport NetworkConnection from './components/NetworkConnection';\r\n\r\nfunction App() {\r\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\r\n  const callBackendAPI = async () => {\r\n    const response = await fetch('/express_backend');\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw Error(body.message)\r\n    }\r\n    return body;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <NetworkConnection />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}