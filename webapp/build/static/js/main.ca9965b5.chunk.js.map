{"version":3,"sources":["components/HiddenNetworkItem.tsx","components/NetworkItem.tsx","components/NetworkConnection.tsx","components/DeviceInformation.tsx","components/StaticNavbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HiddenNetworkItem","useState","securityKey","setSecurityKey","ssid","setSSID","history","useHistory","expanded","expandButton","Button","className","onClick","connectionPrompt","Input","variant","placeholder","onChange","event","target","value","str","test","push","alert","NetworkItem","props","encIcon","network","encrypted","Lock","LockOpen","selected","to","Wifi","NetworkConnection","availableNetworks","setNetworks","selectedNetworkIndex","setSelectedNetworkIndex","length","map","index","fetch","then","response","a","json","responseJson","scan_results","console","log","catch","reason","DeviceInformation","deviceInfo","setDeviceInfo","deviceName","setDeviceName","notes","setNotes","siteId","setSiteId","location","useLocation","searchParams","URLSearchParams","search","isBlank","ipv4info","get","address","Info","mac","PermDeviceInformation","type","devname","siteid","requestOptions","method","headers","body","JSON","stringify","name","saveDeviceInfo","passkey","wifi_ssid","wifi_passcode","attemptConnection","StaticNavItem","currentRoute","route","pathname","startsWith","icon","label","StaticNavbar","children","React","Children","child","path","App","animationIn","animationOut","isVisible","autoCollapse","roundRightCorners","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca9965b5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Input } from 'reactstrap';\r\nimport { Wifi } from '@material-ui/icons';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nexport default function HiddenNetworkItem() {\r\n    const [securityKey, setSecurityKey]: [string, any] = useState('');\r\n    const [ssid, setSSID]: [string, any] = useState('');\r\n    const history = useHistory();\r\n\r\n    const [expanded, setExpanded]: [boolean, any] = useState(true);\r\n\r\n    //Helper function to check if string is null or whitespace\r\n    function isBlank(str: string) {\r\n        return !str || /^\\s*$/.test(str);\r\n    }\r\n\r\n    const onSecurityKeyChange = (event: any) => {\r\n        setSecurityKey(event.target.value);\r\n    };\r\n\r\n    const onSSIDChange = (event: any) => {\r\n        setSSID(event.target.value);\r\n    };\r\n\r\n    const expandButton = (\r\n        <Button\r\n            className=\"expandButton\"\r\n            onClick={() => {\r\n                //Disabled expand/hide functionality to meet acceptance test.\r\n                //setExpanded(!expanded);\r\n            }}\r\n        >\r\n            Hidden SSID\r\n        </Button>\r\n    );\r\n\r\n    const connectionPrompt = expanded ? (\r\n        <div className=\"hiddenNetworkItem\">\r\n            {expandButton}\r\n\r\n            <div className=\"inline\">\r\n                <Input\r\n                    variant=\"outlined\"\r\n                    className=\"input\"\r\n                    placeholder=\"Hidden Network SSID\"\r\n                    onChange={onSSIDChange}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"inline\">\r\n                <Input\r\n                    variant=\"outlined\"\r\n                    className=\"input\"\r\n                    placeholder=\"Hidden Network Password\"\r\n                    onChange={onSecurityKeyChange}\r\n                />\r\n                <Button\r\n                    className=\"button\"\r\n                    onClick={() => {\r\n                        if (!isBlank(ssid)) {\r\n                            history.push(\r\n                                `/device-information?ssid=${ssid}&passkey=${securityKey}`\r\n                            );\r\n                        } else {\r\n                            alert('SSID required before proceeding.');\r\n                        }\r\n                    }}\r\n                >\r\n                    Continue\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"inline\"></div>\r\n        </div>\r\n    ) : (\r\n        <div className=\"hiddenNetworkItem\">{expandButton}</div>\r\n    );\r\n\r\n    return <div>{connectionPrompt}</div>;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, Input } from 'reactstrap';\r\nimport { Wifi, Lock, LockOpen } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NetworkItem(props: any) {\r\n    const [securityKey, setSecurityKey]: [string, any] = useState('');\r\n\r\n    const onSecurityKeyChange = (event: any) => {\r\n        setSecurityKey(event.target.value);\r\n    };\r\n\r\n    const encIcon = props.network.encrypted ? (\r\n        <Lock className=\"rightIcon\" />\r\n    ) : (\r\n        <LockOpen className=\"rightIcon\" />\r\n    );\r\n\r\n    const connectionPrompt = props.selected ? (\r\n        <div className=\"inline\">\r\n            {props.network.encrypted ? (\r\n                <Input\r\n                    variant=\"outlined\"\r\n                    className=\"input\"\r\n                    placeholder=\"Password\"\r\n                    onChange={onSecurityKeyChange}\r\n                />\r\n            ) : null}\r\n            <Link\r\n                className=\"button\"\r\n                to={`/device-information?ssid=${props.network.ssid}&passkey=${securityKey}`}\r\n            >\r\n                Continue\r\n            </Link>\r\n        </div>\r\n    ) : null;\r\n\r\n    return (\r\n        <div className=\"networkItem floatingCard\" onClick={props.onClick}>\r\n            <div className=\"inline\">\r\n                <Wifi className=\"leftIcon\" />\r\n\r\n                {props.network.ssid}\r\n\r\n                {encIcon}\r\n            </div>\r\n\r\n            {connectionPrompt}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport HiddenNetworkItem from './HiddenNetworkItem';\r\nimport NetworkItem from './NetworkItem';\r\n\r\nexport default function NetworkConnection() {\r\n    const [availableNetworks, setNetworks]: [Array<any>, any] = useState([]);\r\n    const [selectedNetworkIndex, setSelectedNetworkIndex]: [\r\n        number,\r\n        any\r\n    ] = useState(-1);\r\n\r\n    const refreshNetworks = () => {\r\n        setSelectedNetworkIndex(-1);\r\n        getWifiNetworks();\r\n    };\r\n\r\n    function getWifiNetworks() {\r\n        fetch('/rescan_wifi')\r\n            .then(async (response) => {\r\n                var responseJson = await response.json();\r\n\r\n                setNetworks(responseJson.scan_results);\r\n\r\n                console.log('Success Getting Wifi Networks');\r\n                console.log(responseJson);\r\n            })\r\n            .catch((reason) => {\r\n                console.log('ERROR:' + reason);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"networkConnection\">\r\n            <h1>Available Networks</h1>\r\n\r\n            {availableNetworks && availableNetworks.length > 0 ? (\r\n                <ul className=\"networkList\">\r\n                    {availableNetworks.map((network, index) => {\r\n                        return (\r\n                            <NetworkItem\r\n                                key={index}\r\n                                network={network}\r\n                                selected={index === selectedNetworkIndex}\r\n                                onClick={() => {\r\n                                    setSelectedNetworkIndex(index);\r\n                                }}\r\n                            />\r\n                        );\r\n                    })}\r\n                </ul>\r\n            ) : (\r\n                <div className=\"noNetworks\">[No Networks Found]</div>\r\n            )}\r\n\r\n            <HiddenNetworkItem />\r\n\r\n            <Button className=\"button\" onClick={refreshNetworks}>\r\n                Refresh\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, Input } from 'reactstrap';\r\nimport { Info, PermDeviceInformation } from '@material-ui/icons';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\n\r\nexport default function DeviceInformation() {\r\n    const [deviceInfo, setDeviceInfo]: [any, any] = useState(null);\r\n    const [deviceName, setDeviceName] = useState('');\r\n    const [notes, setNotes] = useState('');\r\n    const [siteId, setSiteId] = useState('');\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    const onDeviceNameChange = (event: any) => {\r\n        setDeviceName(event.target.value);\r\n    };\r\n\r\n    const onNotesChange = (event: any) => {\r\n        setNotes(event.target.value);\r\n    };\r\n\r\n    const onSiteIdChange = (event: any) => {\r\n        setSiteId(event.target.value);\r\n    };\r\n\r\n    //Helper function to check if string is null or whitespace\r\n    function isBlank(str: string) {\r\n        return !str || /^\\s*$/.test(str);\r\n    }\r\n\r\n    function getDeviceInfo() {\r\n        if (!deviceInfo) {\r\n            fetch('/devinfo')\r\n                .then(async (response) => {\r\n                    var responseJson = await response.json();\r\n                    const ipv4info = responseJson[0];\r\n\r\n                    console.log(ipv4info);\r\n                    setDeviceInfo(ipv4info);\r\n                })\r\n                .catch((reason) => {\r\n                    console.log('Something went wrong: ' + reason);\r\n                });\r\n        }\r\n    }\r\n\r\n    function saveDeviceInfo(devname: string, siteid: string) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                name: devname,\r\n                siteid: siteid,\r\n                notes: notes,\r\n            }),\r\n        };\r\n\r\n        console.log(\r\n            'Sending device info message with ' + devname + ':' + siteid\r\n        );\r\n\r\n        fetch('/devinfo', requestOptions)\r\n            .then(async (response) => {\r\n                var responseJson = await response.json();\r\n\r\n                console.log(responseJson);\r\n            })\r\n            .catch((reason) => {\r\n                console.log('Something went wrong: ' + reason);\r\n            });\r\n    }\r\n\r\n    function attemptConnection(ssid: string, passkey: string) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ wifi_ssid: ssid, wifi_passcode: passkey }),\r\n        };\r\n\r\n        console.log('sending connection message with ' + ssid + ':' + passkey);\r\n\r\n        fetch('/enable_wifi', requestOptions)\r\n            .then(async (response) => {\r\n                var responseJson = await response.json();\r\n\r\n                console.log(responseJson);\r\n            })\r\n            .catch((reason) => {\r\n                console.log('Something went wrong: ' + reason);\r\n            });\r\n    }\r\n\r\n    const handleSaveButton = () => {\r\n        if (!isBlank(deviceName)) {\r\n            console.log('Saving device name: ' + deviceName);\r\n            console.log('Saving site id: ' + siteId);\r\n            saveDeviceInfo(deviceName, siteId);\r\n\r\n            const ssid = searchParams.get('ssid');\r\n            const passkey = searchParams.get('passkey');\r\n\r\n            if (ssid != null && passkey != null && !isBlank(ssid)) {\r\n                attemptConnection(ssid, passkey);\r\n            } else {\r\n                alert(\r\n                    'SSID or network passkey not specified.  Return to network selection and try again.'\r\n                );\r\n            }\r\n        } else {\r\n            alert('Device name cannot be empty.');\r\n        }\r\n    };\r\n\r\n    //Get the device info once when the component is loaded.\r\n    getDeviceInfo();\r\n\r\n    console.log(searchParams.get('ssid'));\r\n    console.log(searchParams.get('passkey'));\r\n\r\n    return (\r\n        <div className=\"deviceInformation\">\r\n            <h1>Logger Settings</h1>\r\n\r\n            <div className=\"infoBox\">\r\n                <div className=\"infoLine\">\r\n                    IP: {deviceInfo?.address ?? '<unknown>'}\r\n                    <Info className=\"icon\" />\r\n                </div>\r\n\r\n                <div className=\"infoLine\">\r\n                    MAC: {deviceInfo?.mac ?? '<unknown>'}\r\n                    <PermDeviceInformation className=\"icon\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"label\">Device Name:</div>\r\n                <Input\r\n                    className=\"input\"\r\n                    onChange={onDeviceNameChange}\r\n                    value={deviceName}\r\n                />\r\n\r\n                <div className=\"label\">Site ID (Optional):</div>\r\n                <Input\r\n                    className=\"input\"\r\n                    onChange={onSiteIdChange}\r\n                    value={siteId}\r\n                />\r\n\r\n                <div className=\"label\">Notes (Optional):</div>\r\n                <Input\r\n                    type=\"textarea\"\r\n                    className=\"largeInput\"\r\n                    onChange={onNotesChange}\r\n                    value={notes}\r\n                />\r\n\r\n                <Button\r\n                    className=\"button\"\r\n                    variant=\"outlined\"\r\n                    onClick={handleSaveButton}\r\n                >\r\n                    Save &amp; Attempt Connect\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","/**\r\n * Side navbar component\r\n *\r\n * creates navbar component that can be developed further to implement both levels of the dynamic side navbar\r\n */\r\n\r\n//import { fireAuthSignOut } from \"FireConfig\";\r\nimport React, { ReactElement } from 'react';\r\nimport { Link, Route, useLocation } from 'react-router-dom';\r\n\r\n/**\r\n * autoCollapse: if true, the navbar compresses itself and expands when hovered. Ideal if icons are used\r\n * roundRightCornser: if true, all 4 corners of the navbar are rounded. if false on the left two are. This will need to be expanded upon later if this component is used to create multiple levels of navbars\r\n * currentPrivilege: privilege of the current user\r\n * active route: the active route\r\n */\r\ninterface navbarProps {\r\n    autoCollapse: Boolean;\r\n    roundRightCorners: Boolean;\r\n    //currentPrivilege: string;\r\n    children: ReactElement | ReactElement[];\r\n}\r\n\r\n/**\r\n * name: text to display on the nav item\r\n * route: the route switched to upon clicking the nav item\r\n * currentRoute: the current route the user is on (used to highlight the current route)\r\n * requiredPermissions: permissions required to navigate to this route\r\n * currentPermission: permission level of the current user\r\n */\r\ninterface StaticNavItemProp {\r\n    label: string;\r\n    route: string;\r\n    icon: any;\r\n    children: ReactElement;\r\n}\r\n\r\n/**\r\n * Navigation item\r\n * @param props\r\n */\r\nexport function StaticNavItem(props: StaticNavItemProp) {\r\n    let currentRoute = useLocation();\r\n\r\n    /**\r\n     * returns empty div if the permissions are not met\r\n     */\r\n    return (\r\n        <Link to={props.route}>\r\n            <div\r\n                className={`navItem ${\r\n                    currentRoute.pathname.startsWith(props.route)\r\n                        ? 'active'\r\n                        : 'inactive'\r\n                }`}\r\n            >\r\n                <div className=\"navIcon\">{props.icon}</div>\r\n                <div className=\"navTitle\">{props.label}</div>\r\n            </div>\r\n        </Link>\r\n    );\r\n}\r\n\r\n/**\r\n * Side navbar\r\n * @param props\r\n */\r\nexport default function StaticNavbar(props: navbarProps) {\r\n    function createRoute(child: ReactElement) {\r\n        return <Route path={child.props.route}>{child.props.children}</Route>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"staticNavbar\">\r\n                <div className={`navLinks`}>{props.children}</div>\r\n            </div>\r\n            <div className=\"routes\">\r\n                {React.Children.map(props.children, createRoute)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n} from 'react-router-dom';\r\nimport { Animated } from 'react-animated-css';\r\nimport './App.scss';\r\nimport NetworkConnection from './components/NetworkConnection';\r\nimport DeviceInformation from './components/DeviceInformation';\r\nimport StaticNavbar, { StaticNavItem } from './components/StaticNavbar';\r\nimport { Info, Wifi } from '@material-ui/icons';\r\nimport 'typeface-lato';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n            <Switch>\r\n                <Route path=\"/\">\r\n                    <Redirect to=\"/network-connection/\" />\r\n                    <Animated\r\n                        animationIn=\"fadeIn\"\r\n                        animationOut=\"fadeOut\"\r\n                        isVisible={true}\r\n                    >\r\n                        <div className=\"app\">\r\n                            <StaticNavbar\r\n                                autoCollapse={true}\r\n                                roundRightCorners={true}\r\n                            >\r\n                                <StaticNavItem\r\n                                    label={'Network Connection'}\r\n                                    route={'/network-connection'}\r\n                                    icon={<Wifi />}\r\n                                >\r\n                                    <NetworkConnection />\r\n                                </StaticNavItem>\r\n                                <StaticNavItem\r\n                                    label={'Device Information'}\r\n                                    route={'/device-information/'}\r\n                                    icon={<Info />}\r\n                                >\r\n                                    <DeviceInformation />\r\n                                </StaticNavItem>\r\n                            </StaticNavbar>\r\n                        </div>\r\n                    </Animated>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}