{"version":3,"sources":["components/NetworkConnection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NetworkConnection","useState","availableNetworks","setNetworks","selectedNetworkIndex","setSelectedNetworkIndex","Container","List","className","console","log","length","map","network","index","encIcon","encrypted","Lock","LockOpen","passkeyInput","ListItem","Button","variant","onClick","e","ListItemIcon","Wifi","ListItemText","primary","ssid","NetworkList","fetch","then","response","a","json","responseJson","alert","data","catch","reason","scan_results","passkey","requestOptions","method","headers","body","JSON","stringify","wifi_ssid","wifi_passcode","attemptConnection","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAIe,SAASA,IAAqB,IAAD,EACoBC,mBAAS,IAD7B,mBACjCC,EADiC,KACdC,EADc,OAE+BF,oBAAU,GAFzC,mBAEjCG,EAFiC,KAEXC,EAFW,KA4GxC,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAMC,UAAU,eAAhB,SAzCY,SAACN,GAGjB,OAFAO,QAAQC,IAAIR,GAERA,GAAqBA,EAAkBS,OAAS,EAE5C,8BACKT,EAAkBU,KAAI,SAACC,EAASC,GAC7B,IAAMC,EAAWF,EAAQG,UAAc,cAACC,EAAA,EAAD,IAAY,cAACC,EAAA,EAAD,IAC7CC,EAAgBL,GAASV,EAC/B,cAACgB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWd,UAAU,QAArC,uBAEA,KAEJ,OAAQ,eAACY,EAAA,EAAD,CAAsBZ,UAAU,SAASe,QAAS,SAACC,GAAOnB,EAAwBS,IAAlF,UACJ,cAACW,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAcnB,UAAU,sBAAsBoB,QAASf,EAAQgB,OAC/D,cAACJ,EAAA,EAAD,UACKV,IAEAI,IARcL,QAgB/B,8BACI,cAACM,EAAA,EAAD,CAAUZ,UAAU,SAApB,SACI,cAACmB,EAAA,EAAD,CAAcnB,UAAU,sBAAsBoB,QAAQ,kCAU7DE,CAAY5B,KAGjB,cAACmB,EAAA,EAAD,CAAQE,QA9GI,WAChBQ,MAAM,SAASC,KAAf,uCAAoB,WAAOC,GAAP,eAAAC,EAAA,sEACSD,EAASE,OADlB,OACZC,EADY,OAGhBC,MAAMD,EAAaE,MACnB7B,QAAQC,IAAI0B,EAAaE,MAJT,2CAApB,uDAKGC,OAAM,SAACC,GACN/B,QAAQC,IAAI,yBAA2B8B,OAuGvC,kBACA,cAACnB,EAAA,EAAD,CAAQE,QApGQ,WASpBQ,MAAM,gBAAgBC,KAAtB,uCAA2B,WAAOC,GAAP,eAAAC,EAAA,sEACED,EAASE,OADX,OACnBC,EADmB,OAGvBjC,EAAYiC,EAAaK,cAEzBhC,QAAQC,IAAI,iCACZD,QAAQC,IAAI0B,GANW,2CAA3B,uDAOGG,OAAM,SAACC,GACN/B,QAAQC,IAAI,SAAW8B,OAmFvB,qBACA,cAACnB,EAAA,EAAD,CAAQE,QAjGa,YAiB7B,SAA2BM,EAAca,GACrC,IAAMC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,UAAWpB,EAAMqB,cAAeR,KAG3DX,MAAM,eAAgBY,GAAgBX,KAAtC,uCAA2C,WAAOC,GAAP,eAAAC,EAAA,sEACdD,EAASE,OADK,OACnCC,EADmC,OAGvC3B,QAAQC,IAAI0B,GAH2B,2CAA3C,uDAIGG,OAAM,SAACC,GACN/B,QAAQC,IAAI,yBAA2B8B,MA5B3CW,CAAkB,iBAAkB,mBAgGhC,6CChGGC,MAnBf,WAYE,OACE,qBAAK5C,UAAU,MAAf,SACE,cAACR,EAAD,OCLSqD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.137f3311.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { List, ListItem, ListItemText, Icon, ListItemIcon, Button, Container, TextField } from '@material-ui/core';\r\nimport { Wifi, Lock, LockOpen } from '@material-ui/icons';\r\n\r\nexport default function NetworkConnection() {\r\n    const [availableNetworks, setNetworks]: [Array<any>, any] = useState([]);\r\n    const [selectedNetworkIndex, setSelectedNetworkIndex]: [number, any] = useState(-1);\r\n\r\n    const sendTestGet = () => {\r\n        fetch(\"/ping\").then(async (response) => {\r\n            var responseJson = await response.json();\r\n\r\n            alert(responseJson.data);\r\n            console.log(responseJson.data);\r\n        }).catch((reason) => {\r\n            console.log(\"Something went wrong: \" + reason);\r\n        })\r\n    };\r\n\r\n    const refreshNetworks = () => {\r\n        getWifiNetworks();\r\n    };\r\n\r\n    const connectToTestNetwork = () => {\r\n        attemptConnection(\"DATA_ERROR_24G\", \"SmileyApple205\");\r\n    };\r\n\r\n    function getWifiNetworks() {\r\n        fetch(\"/rescan_wifi\").then(async (response) => {\r\n            var responseJson = await response.json();\r\n\r\n            setNetworks(responseJson.scan_results);\r\n\r\n            console.log(\"Success Getting Wifi Networks\");\r\n            console.log(responseJson);\r\n        }).catch((reason) => {\r\n            console.log(\"ERROR:\" + reason);\r\n        });\r\n    }\r\n\r\n    function attemptConnection(ssid: string, passkey: string) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ wifi_ssid: ssid, wifi_passcode: passkey})\r\n        };\r\n\r\n        fetch(\"/enable_wifi\", requestOptions).then(async (response) => {\r\n            var responseJson = await response.json();\r\n\r\n            console.log(responseJson);\r\n        }).catch((reason) => {\r\n            console.log(\"Something went wrong: \" + reason);\r\n        })\r\n    }\r\n\r\n    function sendTestPost(message: string) {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ data: message })\r\n        };\r\n\r\n        fetch(\"/testpost\", requestOptions).then(async (response) => {\r\n            var responseJson = await response.json();\r\n\r\n            alert(responseJson.data);\r\n            console.log(responseJson.data);\r\n        }).catch((reason) => {\r\n            console.log(\"Something went wrong: \" + reason);\r\n        })\r\n    }\r\n\r\n    const NetworkList = (availableNetworks: Array<any>) => {\r\n        console.log(availableNetworks);\r\n\r\n        if (availableNetworks && availableNetworks.length > 0) {\r\n            return (\r\n                <div>\r\n                    {availableNetworks.map((network, index) => {\r\n                        const encIcon = (network.encrypted) ? (<Lock/>) : (<LockOpen/>);\r\n                        const passkeyInput = (index == selectedNetworkIndex) ? (\r\n                        <ListItem>\r\n                            <Button variant=\"outlined\" className=\"pl-10\">Connect</Button>\r\n                        </ListItem>\r\n                        ) : null;\r\n\r\n                        return (<ListItem key={index} className=\"border\" onClick={(e) => {setSelectedNetworkIndex(index)}}>\r\n                            <ListItemIcon>\r\n                                <Wifi />\r\n                            </ListItemIcon>\r\n                            <ListItemText className=\"flex justify-center\" primary={network.ssid} />\r\n                            <ListItemIcon>\r\n                                {encIcon}\r\n                            </ListItemIcon>\r\n                                {passkeyInput}\r\n                        </ListItem>)\r\n                    })}\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <ListItem className=\"border\">\r\n                        <ListItemText className=\"flex justify-center\" primary=\"Didn't find any networks.\" />\r\n                    </ListItem>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <List className=\"w-1/2 border\">\r\n                {NetworkList(availableNetworks)}\r\n            </List>\r\n\r\n            <Button onClick={sendTestGet}>Ping</Button>\r\n            <Button onClick={refreshNetworks}>Refresh</Button>\r\n            <Button onClick={connectToTestNetwork}>Try To Connect To Data Error</Button>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport NetworkConnection from './components/NetworkConnection';\r\n\r\nfunction App() {\r\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\r\n  const callBackendAPI = async () => {\r\n    const response = await fetch('/express_backend');\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw Error(body.message)\r\n    }\r\n    return body;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <NetworkConnection />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}