{"version":3,"sources":["components/NetworkConnection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NetworkConnection","useState","availableNetworks","setNetworks","Container","List","className","ListItem","ListItemIcon","Wifi","ListItemText","primary","map","network","ssid","NetworkList","Button","onClick","fetch","then","response","a","json","responseJson","alert","data","console","log","catch","reason","scanResults","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAIe,SAASA,IAAqB,IAAD,EACgCC,mBAAS,IADzC,mBACjCC,EADiC,KACdC,EADc,KAiExC,OACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAMC,UAAU,eAAhB,UACI,eAACC,EAAA,EAAD,CAAUD,UAAU,SAApB,UACI,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAcJ,UAAU,sBAAsBK,QAAQ,qBAxBlD,SAACT,GACjB,GAAGA,EACC,OACI,8BACCA,EAAkBU,KAAI,SAACC,GACnBN,EAAA,EACAC,EAAA,EACIC,EAAA,EAEJC,EAAA,EAAsDG,EAAQC,UAkBlEC,CAAYb,GAEb,cAACQ,EAAA,EAAD,CAAcC,QAAQ,qBACtB,cAACD,EAAA,EAAD,CAAcC,QAAQ,uBACtB,cAACD,EAAA,EAAD,CAAcC,QAAQ,4BAG1B,cAACK,EAAA,EAAD,CAAQC,QA/EI,WAChBC,MAAM,SAASC,KAAf,uCAAoB,WAAOC,GAAP,eAAAC,EAAA,sEACSD,EAASE,OADlB,OACZC,EADY,OAGhBC,MAAMD,EAAaE,MACnBC,QAAQC,IAAIJ,EAAaE,MAJT,2CAApB,uDAKGG,OAAM,SAACC,GACNH,QAAQC,IAAI,yBAA2BE,OAwEvC,kBACA,cAACb,EAAA,EAAD,CAAQC,QArEQ,WAKpBC,MAAM,gBAAgBC,KAAtB,uCAA2B,WAAOC,GAAP,eAAAC,EAAA,sEACED,EAASE,OADX,OACnBC,EADmB,OAGvBpB,EAAYoB,EAAaO,aAEzBJ,QAAQC,IAAI,iCACZD,QAAQC,IAAIJ,GANW,2CAA3B,uDAOGK,OAAM,SAACC,GACNH,QAAQC,IAAI,SAASE,OAwDrB,wBC/DGE,MAnBf,WAYE,OACE,qBAAKzB,UAAU,MAAf,SACE,cAACN,EAAD,OCLSgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.295d89b0.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport { List, ListItem, ListItemText, Icon, ListItemIcon, Button, Container } from \"@material-ui/core\";\nimport { Wifi } from \"@material-ui/icons\";\n\nexport default function NetworkConnection() {\n    const [availableNetworks, setNetworks] : [Array<{ssid: string}>, any] = useState([]);\n\n    const sendTestGet = () => {\n        fetch(\"/ping\").then(async (response) => {\n            var responseJson = await response.json();\n\n            alert(responseJson.data);\n            console.log(responseJson.data);\n        }).catch((reason) => {\n            console.log(\"Something went wrong: \" + reason);\n        })\n    };\n\n    const refreshNetworks = () => {\n        getWifiNetworks();\n    };\n\n    function getWifiNetworks() {\n        fetch(\"/rescan_wifi\").then(async (response) => {\n            var responseJson = await response.json();\n\n            setNetworks(responseJson.scanResults);\n\n            console.log(\"Success Getting Wifi Networks\");\n            console.log(responseJson);\n        }).catch((reason) => {\n            console.log(\"ERROR:\"+reason);\n        });\n    }\n\n    function sendTestPost(message: string) {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ data: message })\n        };\n\n        fetch(\"/testpost\", requestOptions).then(async (response) => {\n            var responseJson = await response.json();\n\n            alert(responseJson.data);\n            console.log(responseJson.data);\n        }).catch((reason) => {\n            console.log(\"Something went wrong: \" + reason);\n        })\n    }\n\n    const NetworkList = (availableNetworks: Array<{ssid: string}> ) => {\n        if(availableNetworks){\n            return (\n                <div>\n                {availableNetworks.map((network) => {\n                    <ListItem className=\"border\">\n                    <ListItemIcon>\n                        <Wifi />\n                    </ListItemIcon>\n                    <ListItemText className=\"flex justify-center\" primary={network.ssid} />\n                    </ListItem>\n                })}\n                </div>\n            )\n        }\n    }\n\n    return (\n        <Container>\n            <List className=\"w-1/2 border\">\n                <ListItem className=\"border\">\n                    <ListItemIcon>\n                        <Wifi />\n                    </ListItemIcon>\n                    <ListItemText className=\"flex justify-center\" primary=\"This is where\" />\n                </ListItem>\n\n                {NetworkList(availableNetworks)}\n\n                <ListItemText primary=\"my wifi networks\" />\n                <ListItemText primary=\"would be displayed\" />\n                <ListItemText primary=\"if I could find any!\" />\n            </List>\n\n            <Button onClick={sendTestGet}>Ping</Button>\n            <Button onClick={refreshNetworks}>Refresh</Button>\n        </Container>\n    );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NetworkConnection from './components/NetworkConnection';\n\nfunction App() {\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  const callBackendAPI = async () => {\n    const response = await fetch('/express_backend');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\n  return (\n    <div className=\"App\">\n      <NetworkConnection />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}